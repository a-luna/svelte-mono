// Generated by ts-to-zod
import { z } from 'zod';

export const gHUserSchema = z.object({
	login: z.string(),
	id: z.number(),
	node_id: z.string(),
	avatar_url: z.string(),
	gravatar_id: z.string(),
	url: z.string(),
	html_url: z.string(),
	followers_url: z.string(),
	following_url: z.string(),
	gists_url: z.string(),
	starred_url: z.string(),
	subscriptions_url: z.string(),
	organizations_url: z.string(),
	repos_url: z.string(),
	events_url: z.string(),
	received_events_url: z.string(),
	type: z.literal('User'),
	site_admin: z.boolean(),
});

export const ghLicenseSchema = z.object({
	key: z.string(),
	name: z.string(),
	spdx_id: z.string(),
	url: z.string().nullable(),
	node_id: z.string(),
});

export const gHRepoSchema = z.object({
	id: z.number().optional(),
	node_id: z.string().optional(),
	name: z.string(),
	full_name: z.string().optional(),
	private: z.boolean().optional(),
	owner: gHUserSchema.optional(),
	html_url: z.string(),
	description: z.string().nullable(),
	fork: z.boolean().optional(),
	url: z.string().optional(),
	forks_url: z.string(),
	keys_url: z.string().optional(),
	collaborators_url: z.string().optional(),
	teams_url: z.string().optional(),
	hooks_url: z.string().optional(),
	issue_events_url: z.string().optional(),
	events_url: z.string().optional(),
	assignees_url: z.string().optional(),
	branches_url: z.string().optional(),
	tags_url: z.string().optional(),
	blobs_url: z.string().optional(),
	git_tags_url: z.string().optional(),
	git_refs_url: z.string().optional(),
	trees_url: z.string().optional(),
	statuses_url: z.string().optional(),
	languages_url: z.string().optional(),
	stargazers_url: z.string(),
	contributors_url: z.string().optional(),
	subscription_url: z.string().optional(),
	subscribers_url: z.string().optional(),
	git_commits_url: z.string().optional(),
	commits_url: z.string().optional(),
	issue_comment_url: z.string().optional(),
	comments_url: z.string().optional(),
	compare_url: z.string().optional(),
	contents_url: z.string().optional(),
	archive_url: z.string().optional(),
	merges_url: z.string().optional(),
	issues_url: z.string().optional(),
	downloads_url: z.string().optional(),
	milestones_url: z.string().optional(),
	pulls_url: z.string().optional(),
	labels_url: z.string().optional(),
	notifications_url: z.string().optional(),
	deployments_url: z.string().optional(),
	releases_url: z.string().optional(),
	created_at: z.string().optional(),
	updated_at: z.string().optional(),
	pushed_at: z.string().optional(),
	git_url: z.string().optional(),
	ssh_url: z.string().optional(),
	clone_url: z.string().optional(),
	svn_url: z.string().optional(),
	homepage: z.string().optional().nullable(),
	size: z.number().optional(),
	stargazers_count: z.number(),
	watchers_count: z.number().optional(),
	language: z.string().optional().nullable(),
	has_issues: z.boolean().optional(),
	has_projects: z.boolean().optional(),
	has_downloads: z.boolean().optional(),
	has_wiki: z.boolean().optional(),
	has_pages: z.boolean().optional(),
	forks_count: z.number(),
	mirror_url: z.string().optional().nullable(),
	archived: z.boolean().optional(),
	disabled: z.boolean().optional(),
	open_issues_count: z.number().optional(),
	license: ghLicenseSchema.nullable(),
	allow_forking: z.boolean().optional(),
	is_template: z.boolean().optional(),
	web_commit_signoff_required: z.boolean().optional(),
	topics: z.array(z.string()).optional(),
	visibility: z.union([z.literal('public'), z.literal('private')]).optional(),
	forks: z.number().optional(),
	open_issues: z.number().optional(),
	watchers: z.number().optional(),
	default_branch: z.string().optional(),
	temp_clone_token: z.string().optional(),
	network_count: z.number().optional(),
	subscribers_count: z.number().optional(),
});

export const gHCommitSchema = z.object({
	url: z.string(),
	sha: z.string(),
	node_id: z.string(),
	html_url: z.string(),
	comments_url: z.string(),
	commit: z.object({
		url: z.string(),
		author: z.object({
			name: z.string(),
			email: z.string(),
			date: z.string(),
		}),
		committer: z.object({
			name: z.string(),
			email: z.string(),
			date: z.string(),
		}),
		message: z.string(),
		tree: z.object({
			url: z.string(),
			sha: z.string(),
		}),
		comment_count: z.number(),
		verification: z.object({
			verified: z.boolean(),
			reason: z.string(),
			signature: z.string().nullable(),
			payload: z.string().nullable(),
		}),
	}),
	author: gHUserSchema,
	committer: gHUserSchema,
	parents: z.array(
		z.object({
			url: z.string(),
			sha: z.string(),
			html_url: z.string(),
		}),
	),
});

export type ghUser = z.infer<typeof gHUserSchema>;
export type ghRepo = z.infer<typeof gHRepoSchema>;
export type ghRepoMinimal = Pick<
	ghRepo,
	| 'name'
	| 'description'
	| 'stargazers_count'
	| 'forks_count'
	| 'html_url'
	| 'stargazers_url'
	| 'forks_url'
	| 'pushed_at'
>;
export type ghCommit = z.infer<typeof gHCommitSchema>;
